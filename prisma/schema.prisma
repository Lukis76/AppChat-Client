// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?                   @unique
  emailVerified DateTime?
  image         String?
  username      String?                   @unique
  conversations ConversationParticipant[]
  msgs          Msg[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id           String                    @id @default(auto()) @map("_id") @db.ObjectId
  participants ConversationParticipant[]
  msg          Msg[]                     @relation("conversationMsgs")
  latestMsg    Msg?                      @relation(name: "latestConversationMsg", fields: [latestMsgId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMsgId  String?                   @unique @db.ObjectId
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model ConversationParticipant {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  user             User         @relation(fields: [userId], references: [id])
  userId           String       @db.ObjectId
  conversation     Conversation @relation(fields: [conversationId], references: [id])
  conversationId   String       @db.ObjectId
  hasSeenLatestMsg Boolean
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Msg {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation  @relation(name: "conversationMsgs", fields: [conversationId], references: [id])
  conversationId String        @db.ObjectId
  isLatestIn     Conversation? @relation("latestConversationMsg")
  senderId       String        @db.ObjectId
  sender         User          @relation(fields: [senderId], references: [id])
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
